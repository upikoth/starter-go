name: Lint, Build and Deploy

on:
  push:
    branches:
      - main

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  CONTAINER_NAME: starter-go

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/setup-go@v4
        with:
          go-version: '1.20'
      - uses: actions/checkout@v3
      - uses: golangci/golangci-lint-action@v3
        with:
          version: v1.52.2

  build-and-push-image:
    needs: lint
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Log in to the Container registry
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: type=raw,value=latest

      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

  deploy:
    needs:
      - lint
      - build-and-push-image
    runs-on: ubuntu-latest
    environment:
      name: prod

    steps:
      - name: executing remote ssh commands
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ secrets.SSH_HOST }}
          port: ${{ secrets.SSH_PORT }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
            docker stop $(docker ps -f name=${{ env.CONTAINER_NAME }} -a -q)
            docker rm $(docker ps -f name=${{ env.CONTAINER_NAME }} -a -q)
            docker run \
              --name ${{ env.CONTAINER_NAME }} \
              -d \
              -p 127.0.0.1:8080:${{ vars.APP_PORT }} \
              --env APP_PORT=${{ vars.APP_PORT }} \
              --env DATABASE_NAME=${{ secrets.DATABASE_NAME }} \
              --env DATABASE_ADDR=${{ secrets.DATABASE_ADDR }} \
              --env DATABASE_USER=${{ secrets.DATABASE_USER }} \
              --env DATABASE_PASSWORD=${{ secrets.DATABASE_PASSWORD }} \
              --env JWT_SECRET=${{ secrets.JWT_SECRET }} \
              ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
            docker system prune -f
