// Code generated by ogen, DO NOT EDIT.

package api

import (
	"net/http"

	"github.com/ogen-go/ogen/conv"
	"github.com/ogen-go/ogen/middleware"
	"github.com/ogen-go/ogen/ogenerrors"
	"github.com/ogen-go/ogen/uri"
	"github.com/ogen-go/ogen/validate"
)

// V1GetCurrentSessionParams is parameters of V1GetCurrentSession operation.
type V1GetCurrentSessionParams struct {
	AuthorizationToken string
}

func unpackV1GetCurrentSessionParams(packed middleware.Parameters) (params V1GetCurrentSessionParams) {
	{
		key := middleware.ParameterKey{
			Name: "Authorization-Token",
			In:   "header",
		}
		params.AuthorizationToken = packed[key].(string)
	}
	return params
}

func decodeV1GetCurrentSessionParams(args [0]string, argsEscaped bool, r *http.Request) (params V1GetCurrentSessionParams, _ error) {
	h := uri.NewHeaderDecoder(r.Header)
	// Decode header: Authorization-Token.
	if err := func() error {
		cfg := uri.HeaderParameterDecodingConfig{
			Name:    "Authorization-Token",
			Explode: false,
		}
		if err := h.HasParam(cfg); err == nil {
			if err := h.DecodeParam(cfg, func(d uri.Decoder) error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.AuthorizationToken = c
				return nil
			}); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "Authorization-Token",
			In:   "header",
			Err:  err,
		}
	}
	return params, nil
}
